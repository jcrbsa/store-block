import React, { FC } from 'react';
import PropTypes, { InferProps } from 'prop-types';
import { PaginationProps } from './Pagination';
import { Checkboxes } from '../EXPERIMENTAL_useCheckboxTree/types';
import { TotalizerProps } from './Totalizer';
import { ActionBarProps } from './ActionBar';
declare const Table: FC<TableProps> & TableComposites;
export declare const measuresPropTypes: {
    /** Calculated table height */
    tableHeight: PropTypes.Requireable<number>;
    /** Height of each row */
    rowHeight: PropTypes.Requireable<number>;
    /** Current density of the table: compact, regular of comfortable */
    currentDensity: PropTypes.Requireable<import("./hooks/useTableMeasures").Density>;
    /** Sets the current density */
    setCurrentDensity: PropTypes.Requireable<(...args: any[]) => any>;
};
export declare const tablePropTypes: {
    /** Table composites */
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    /** Return of the useCheckboxTree hook */
    checkboxes: PropTypes.Requireable<any>;
    /** Return of the useTableMeasures hook */
    measures: PropTypes.Requireable<PropTypes.InferProps<{
        /** Calculated table height */
        tableHeight: PropTypes.Requireable<number>;
        /** Height of each row */
        rowHeight: PropTypes.Requireable<number>;
        /** Current density of the table: compact, regular of comfortable */
        currentDensity: PropTypes.Requireable<import("./hooks/useTableMeasures").Density>;
        /** Sets the current density */
        setCurrentDensity: PropTypes.Requireable<(...args: any[]) => any>;
    }>>;
    /** Function that generates row keys */
    rowKey: PropTypes.Requireable<(...args: any[]) => any>;
    /** If the table is empty or not */
    empty: PropTypes.Requireable<boolean>;
    /** Array of columns */
    columns: PropTypes.Requireable<PropTypes.InferProps<{
        /** Column id */
        id: PropTypes.Validator<string>;
        /** Column title that is displayed on header */
        title: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        /** Column fixed width. Can be pixel (number) or any other unit (string) */
        width: PropTypes.Requireable<React.ReactText>;
        /** If the Table can be sorted using the columns as reference */
        sortable: PropTypes.Requireable<boolean>;
        /** How columns cells should be rendered */
        cellRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        /** If the column is exented or not */
        extended: PropTypes.Requireable<boolean>;
        /** If the column is condensed or not */
        condensed: PropTypes.Requireable<string[]>;
    }>[]>;
    /** Array of items */
    items: PropTypes.Requireable<object[]>;
    /** If the Table is loading or not */
    loading: PropTypes.Requireable<boolean | PropTypes.InferProps<{
        renderAs: PropTypes.Requireable<(...args: any[]) => any>;
    }>>;
    /** Function trigged on a row click */
    onRowClick: PropTypes.Requireable<(...args: any[]) => any>;
    /** Function that defines if a row is active or not */
    isRowActive: PropTypes.Requireable<(...args: any[]) => any>;
    /** Table EmptyState component */
    emptyState: PropTypes.Requireable<PropTypes.InferProps<{
        label: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
    }>>;
    /** Sorting properties */
    sorting: PropTypes.Requireable<PropTypes.InferProps<{
        /** Sorted properties */
        sorted: PropTypes.Requireable<PropTypes.InferProps<{
            /** Columns that is currently sorting the items */
            by: PropTypes.Requireable<string>;
            /** If is ascending or descending */
            order: PropTypes.Requireable<string>;
        }>>;
        /** Clear the sorting */
        clear: PropTypes.Requireable<(...args: any[]) => any>;
        /** Sort function */
        sort: PropTypes.Requireable<(...args: any[]) => any>;
    }>>;
    /** Base testId */
    testId: PropTypes.Requireable<string>;
    /** If the rows should be highlighted on :hover */
    highlightOnHover: PropTypes.Requireable<boolean>;
    /** If the header is sticky or not */
    stickyHeader: PropTypes.Requireable<boolean>;
};
export declare type TableProps = InferProps<typeof tablePropTypes> & {
    checkboxes: Checkboxes<unknown>;
};
export declare type TableComposites = {
    Toolbar: FC;
    FilterBar?: FC;
    Pagination?: FC<PaginationProps>;
    Bulk?: FC;
    Totalizer?: FC<TotalizerProps>;
    ActionBar?: FC<ActionBarProps>;
};
export default Table;
