import { IterationOf } from '../../Iteration/IterationOf';
import { Iteration } from '../../Iteration/Iteration';
import { Pos } from '../../Iteration/Pos';
import { Next } from '../../Iteration/Next';
import { NonNullable } from '../../Union/NonNullable';
import { Path as PPath } from './_Internal';
import { Index } from '../../_Internal';
import { Pick as OPick } from '../Pick';
import { EndOf } from '../../Tuple/EndOf';
declare type _Pick<O extends object, Path extends Index[], I extends Iteration = IterationOf<'0'>> = OPick<O, Path[Pos<I>]> extends infer Picked ? {
    [K in keyof Picked]: NonNullable<Picked[K]> extends object ? Pos<I> extends EndOf<Path> ? Picked[K] : _Pick<Picked[K] & {}, Path, Next<I>> : Picked[K];
} : never;
/** Extract out of **`O`** the fields at **`Path`**
 * @param O to extract from
 * @param Path to be followed
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Pick<O extends object, Path extends PPath> = _Pick<O, Path>;
export {};
